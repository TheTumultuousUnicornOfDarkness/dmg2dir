#!/bin/bash

#################################################################################################
#					ENVIRONMENT						#
#################################################################################################
[[ $DEBUG > 1 ]] && set -x

export TEXTDOMAINDIR=@TEXTDOMAINDIR@
export TEXTDOMAIN=dmg2dir
udiskcmd=$(command -v udisksctl)
geniso=$(command -v genisoimage)
darling=$(command -v dyld)
args=$#
version="3.0.2"
critical=0

customname=false	# -n
tmpdir="/tmp/dmg2dir"	# -t
force=false		# -f
run=false		# -r
iso=false		# -i
nodir=false		# -d


#################################################################################################
#					COMMONS	FUNCTIONS					#
#################################################################################################
msg() {
	if ! [[ -n "$quiet" ]]; then
		str=$1
		shift
		printf "\033[1;32m==>\033[0;1m `gettext -s "$str"` \033[0m\n" "$@"
	fi
}

msgv() {
	if [[ -n "$v" ]]; then
		str=$1
		shift
		printf "\033[1;34m  ->\033[0m `gettext -s "$str"` \n" "$@"
	fi
}

msgw() {
	if [[ -n "$w" ]]; then
		echo -e "    $1"
	fi
}

error() {
	if [[ -z $err ]]; then
		err=$2
		echo -e "`gettext -s "$1"`"

		if [[ -n "$v" ]]; then
			printf "\033[1;31m `gettext -s 'Error %s has occured.'` \033[0m\n" "$2"
		fi

		if [[ $critical == 2 ]] ; then
			$udiskcmd unmount --no-user-interaction -b "/dev/disk/by-label/$label" 2&>1 /dev/null
		fi
		if [[ $critical > 0 ]] ; then
			$udiskcmd loop-delete --no-user-interaction -b $loop 2&>1 /dev/null
		fi
	fi

	exit $err
}

usage() {
	gettext -es "Usage: dmg2dir [OPTIONS] dmg_file.dmg"
	gettext -es "Options:"
	gettext -es "\t-n, --name\t\tCustom name for application directory which will be created"
	gettext -es "\t-p, --path\t\tCustom path for application directory"
	gettext -es "\t-t, --tmp\t\tCustom temporary directory"
	gettext -es "\t-f, --force\t\tOverwrite existing IMG file"
	gettext -es "\t-r, --run\t\tAttempt to run extracted application (use Darling)"
	gettext -es "\t-i, --iso\t\tGenerate an ISO file from IMG file (use Genisoimage)"
	gettext -es "\t-d, --iso-only\t\tSame as --iso, without application directory"
	gettext -es "\t-q, --quiet\t\tRun silently"
	gettext -es "\t-v, --verbose\t\tRun verbosely"
	gettext -es "\t-w, --+verbose\t\tRun more verbosely"
	gettext -es "\t-V, --version\t\tDisplay script version and exit"
	gettext -es "\t-h, --help\t\tDisplay this help and exit"
	gettext -es "\nPlease report problems at <https://github.com/X0rg/dmg2dir/issues>."
}

version() {
	echo -e "DMG2DIR $version"
	echo -e "Copyleft 2015."
	echo -e "\nWritten by Xorg (https://github.com/X0rg)."
}


#################################################################################################
#					VERIFIES FUNCTIONS					#
#################################################################################################
checkfile() {
	if [[ ! -f $1 ]]; then
		error "No output file found." $2
	fi
}

checkvar() {
	if [[ -z $1 ]]; then
		error "Variable is empty." $2
	fi

	if [[ $3 == 2 ]]; then
		[[ "$1" == "/dev/loop"* ]] && [[ ${#1} != 10 ]] && \
		error "Variable loop is wrong." $2
	fi
}

checkdir() {
	if [[ ! -d $1 ]]; then
		error "Directory not fount." $2
	fi

	if [[ $3 == 2 ]]; then
		[[ -z "$(ls -A $1)" ]] && \
		error "Directory is empty." $2
	fi
}

checkcode() {
	if [[ $1 != 0 ]]; then
		error "Command fails." $2
	fi
}


#################################################################################################
#					MAIN FUNCTIONS						#
#################################################################################################
convertdmg() {
	msgv "Convert %s to %s" "$filetoconvert" "$tmpdir/$name.img"
	dmg2img $quiet $v $w -i "$filetoconvert" -o "$tmpdir/$name.img"
	checkfile "$tmpdir/$name.img" 10
}

premount() {
	msgv "List devices labels"
	dev=$(ls -t /dev/disk/by-label)
	checkvar "$dev" 20
	msgw "$dev"

	msgv "Set up loop-device"
	loop=$($udiskcmd loop-setup --no-user-interaction -f "$tmpdir/$name.img")
	checkvar "$loop" 21
	msgw "$loop"
	critical=1

	msgv "Retrieve loop device name"
	loop=$(echo ${loop/Mapped file "$tmpdir/$name.img" as } | cut -d. -f1)
	checkvar "$loop" 22
	msgw "$loop"
	
	msgv "Relist devices labels"
	dev2=$(ls -t /dev/disk/by-label)
	checkvar "$dev2" 23
	msgw "$dev2"

	msgv "Get label from lists differences"
	label=$(echo ${dev2%$dev})
	checkvar "$label" 24
	msgw "$label"

	if ! $customname; then
		msgv "No custom name defined, set name as label"
		name=$label
		checkvar "$name" 25
		msgw "$name"
	fi

	msgv "Set application directory"
	[[ -n $savepath ]] && app_directory="$savepath/$name" || app_directory=`dirname "$filetoconvert"`/"$name"
	checkvar "$app_directory" 26
	msgw "$app_directory"
}

mountimg() {
	$udiskcmd mount -b "/dev/disk/by-label/$label" > $output
	mountpoint=$(grep "$loop" /etc/mtab | awk '{print $2}' | sed 's/[^[:print:]]//')
	checkvar "$mountpoint" 30
	msgw "$mountpoint"
	critical=2
}

copydir() {
	msgv "Make application directory: %s" "$app_directory"
	mkdir -p $v "$app_directory"
	checkdir "$app_directory" 40

	msgv "Copy files in application directory"
	cp -aup $v "`echo -e "$mountpoint" | sed 's/[^[:print:]]//'`"*/* "$app_directory"
	checkdir "$app_directory" 41 2
}

convertiso() {
	$geniso $v -V "$name" -R -probe -g -o "$app_directory.iso" "$mountpoint"
	checkfile "$app_directory.iso" 50
}

umountimg() {
	msgv "Unmount device (by his label)"
	$udiskcmd unmount --no-user-interaction -b "/dev/disk/by-label/$label" > $output
	checkcode "$?" 60
	msgw "Device unmounted"
	critical=1

	msgv "Delete loop-device"
	$udiskcmd loop-delete --no-user-interaction -b $loop
	checkcode "$?" 61
	msgw "Device deleted"
	critical=0
}

launcher() {
	find "$app_directory"/*.app/Contents/MacOS -exec file '{}' \; | grep "Mach-O" | grep "executable" | cut -f1 -d: | while IFS= read -r possibleexecutable; do
		msgv "Found file %s, launch it with dyld" "$possibleexecutable"
		dyld "$possibleexecutable"
	done
}


#################################################################################################
#					MAIN							#
#################################################################################################
# Args
while [[ $# > 0 ]]; do
	case "$1" in
		-n|--name)	shift; name="$1"; customname=true;;
		-p|--path)	shift; savepath="$1";;
		-t|--tmp)	shift; tmpdir="$1";;
		-f|--force)	force=true;;
		-r|--run)	run=true;;
		-i|--iso)	iso=true;;
		-d|--iso-only)	iso=true; nodir=true;;
		-q|--quiet)	quiet="-s";;
		-v|--verbose)	unset quiet; v="-v";;
		-w|--+verbose)	unset quiet; v="-v"; w=-V;;
		-V|--version)	version; exit 0;;
		-h|--help)	usage; exit 0;;
		- |--)		usage; exit 1;;
		*)		filetoconvert=$1;;
	esac
	shift
done

# Routines
if [[ $args < 1 ]] || [[ ! -f "$filetoconvert" ]] || ([[ -z "$name" ]] && $customname); then
	error "You must use arguments. Use --help for help." 1
fi
if [[ -z $udiskcmd ]] || ($run && [[ -z $darling ]]) || ($iso && [[ -z $geniso ]]); then
	error "Missing package." 1
fi
if ! $(groups | grep -q disk); then
	error "You need to be in group 'disk'."
fi

[[ -z "$name" ]] && name=$(basename "$filetoconvert" .dmg)
[[ -z $w      ]] && output="/dev/null" || output="/dev/stdout"
msg "Routines successfully accomplished. Ready!"

# Start
if [[ ! -d "$tmpdir" ]]; then
	msg "Make temporary working directory..."
	mkdir -p $v "$tmpdir"
fi

if [[ ! -f "$tmpdir/$name.img" ]] || $force; then
	msg "Convert DMG file to IMG file..."
	convertdmg
else
	msgv "File %s exists. Use --force to override it." "$tmpdir/$name.img"
fi

msg "Prepare loop device..."
premount

msg "Mount block device..."
mountimg

if ! $nodir; then
	msg "Copy files in application directory..."
	copydir
fi

if $iso; then
	msg "Generate ISO file..."
	convertiso
fi

msg "Umount loop device..."
umountimg

if $run && ! $nodir; then
	msg "Try to run binary file with Darling..."
	launcher
fi

exit 0

# Written by Xorg (https://github.com/X0rg/dmg2dir). Copyleft 2015.
